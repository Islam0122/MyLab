from aiogram import F, types, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, FSInputFile
import asyncio
from handlers.user_panel.start_functions import send_welcome_message
from keyboard.inline import InlineKeyboardBuilder
from filter.chat_types import ChatTypeFilter
from aiogram import Bot, types


docs_to_pdf_private_router = Router()
docs_to_pdf_private_router.message.filter(ChatTypeFilter(['private']))


class docs_to_pdf_State(StatesGroup):
    waiting_for_doc_file = State()
    processing_file = State()


@docs_to_pdf_private_router.callback_query(F.data == 'docs_to_pdf')
async def docs_to_pdf_callback_query(query: types.CallbackQuery, state: FSMContext) -> None:
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_docs_to_pdf'))
    m = await query.message.edit_caption(
        caption=(
            "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (DOC, DOCX, TXT –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ PDF. "
            "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10 –ú–ë. "
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞."
        ),
        reply_markup=keyboard.as_markup()
    )
    await state.update_data(message_id=m.message_id)
    await query.answer("–û–∂–∏–¥–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")
    await state.set_state(docs_to_pdf_State.waiting_for_doc_file)


@docs_to_pdf_private_router.callback_query(F.data == 'cancel_docs_to_pdf')
async def cancel_docs_to_pdf(query: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await query.message.delete()
    await query.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await send_welcome_message(query.from_user, query.message)  # –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è


@docs_to_pdf_private_router.message(docs_to_pdf_State.waiting_for_doc_file)
async def docs_to_pdf_process(message: types.Message, state: FSMContext, bot: Bot) -> None:
    if message.document:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
        file_extension = message.document.file_name.split('.')[-1].lower()
        if file_extension in ["doc", "docx", "txt"]:
            user_data = await state.get_data()
            message_id = user_data.get("message_id")

            if message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ä–∞–Ω–µ–µ
                await bot.delete_message(message.chat.id, message_id)

            # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()
            await state.clear()
            await send_welcome_message(message.from_user, message)
        else:
            await message.delete()
            m = await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ DOC, DOCX –∏–ª–∏ TXT.")
            await asyncio.sleep(5)
            await m.delete()
    else:
        await message.delete()
        m = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOC, DOCX –∏–ª–∏ TXT.")
        await asyncio.sleep(5)
        await m.delete()